/**
 * @author Mahesh Patel
 * @description This is the starting point of the app
  */
angular
	.module('myApp', ['ngRoute', 'ngResource'])
	.config(function($locationProvider, $routeProvider) {
		//Application's route cofiguration
		$routeProvider.
			when('/', {
			  templateUrl: '../pages/home.html'
			}).		
			when('/prime', {
			  template: '<lt-prime-number></lt-prime-number>'
			}).			
			when('/palindrome', {
			  template: '<lt-palindrome></lt-palindrome>'
			}).
			when('/fibonacci', {
			  template: '<lt-fibonacci></lt-fibonacci>'
			}).
			otherwise('/');
		//Remove the leading # from the url
		$locationProvider.html5Mode(true);
	});


/**
 * @author Mahesh Patel
 * @description This file is a factory/service for palindrome functionality
 */
angular
	.module('myApp')
	.factory('palindromeFactory', ['$http', function($http){
		return{
			checkpalindrome: function(palindromeString){
				return $http
					.get('/checkpalindrome.php?palindromeString=' + palindromeString);
			}
		}
	}]);
/**
 * @author Mahesh Patel
 * @description This is fibonacci component which will match to lt-fibonacci html tag
 */
angular
	.module('myApp')
	.component('ltFibonacci', {
			templateUrl: '../../../pages/fibonacci.html',
			controller : ['palindromeFactory', function(palindromeFactory){
							var self = this;
							
							//this function will be called on 'Generate' button click
							self.generate = function(){
								self.message='';
								self.fibonacciSeries='';
								if (self.fibonacciNumber == undefined ) {
									self.message = 'Please enter some number.';
								}
								else if( !(self.fibonacciNumber >= 0)){
									self.message = 'Please enter some number greater then 0.';
								}
								self.fibonacciSeries = generateFibonacci(self.fibonacciNumber);
							};

							//this function will generate the fibonacci series
							generateFibonacci = function(fibonacciNumber){
								var output = '';
								//for the starting condition if input is 0 or 1
								fibonacciNumber == 0 ? output += String(0) : '';
								fibonacciNumber >= 1 ? output += String('0 1') : '';
								
								//for the starting condition if input > 1
								var n1=0, n2=1, n3=1
								if (fibonacciNumber > 1)
									while( fibonacciNumber >= n3)
									{
										output += ' ' + String(n3);
										n1 = n2;
										n2 = n3;
										n3= n1 + n2;
									}
								return output;
					
							}
						}]//controller-end
		});
/**
 * @author Mahesh Patel
 * @description This is palindrome component which will match to lt-palindrome html tag
 */
angular
	.module('myApp')
	.component('ltPalindrome', {
			templateUrl: '../../../pages/palindrome.html',
			controller : function(palindromeFactory){
				var self = this;
				//this function will be invoke on hit of 'check' button
				self.check = function(){
					self.message='';
					self.messageSuccess='';
					if (self.palindromeString == undefined ) {
						self.message = 'Please enter something to check for palindrome.';
					}
					else{				
						//Call the palindrome service/factory to fetch the result from server
						palindromeFactory
							.checkpalindrome(self.palindromeString)
							.then(function(resp){
								//this callback handles the success response
								if (resp.data.status == 'success') {
									self.messageSuccess = resp.data.message;
								}
								else if (resp.data.status == 'failed'){
									self.message = resp.data.message;
								}
							
							}, function(error){
								//this callback handles the error response
								self.message = 'There is some issue on our side. Let us resolve and get back to you.';
							});
					}

				};
			}//controller
		});
/**
 * @author Mahesh Patel
 * @description This is primnumber component which will match to lt-prime-number html tag
 */
angular
	.module('myApp')
	.component('ltPrimeNumber', {
			templateUrl: '../../../pages/prime.html',
			controller : function(){
				var self = this;

				//this function will be invoke on hit of 'check' button
				self.check = function(){
					self.message='';
					self.messageSuccess='';
					if (self.primeNumber == undefined ) {
						self.message = 'Please enter some number.';
					}
					else if( !(self.primeNumber >= 0)){
						self.message = 'Please enter some number greater then 0.';
					}
					else if (isPrime(self.primeNumber))
						self.messageSuccess = "Hurray! It's a prime number.";
					else
						self.message = "It's not a prime number.";
				};
				//this check if the number is prime or not
				isPrime = function(primeNumber){
					var m=0;
					var n = primeNumber;
					m=n/2;
					//0 and 1 are not prime numbers
					if (primeNumber == 0 || primeNumber == 1) return false;

					//check for number greater then 1
					for (var i = 2; i <= m; i++) {//loop from 2 to the n/2
						if(n%i == 0){//if the numbder divdes then its not a prime
							return false;
						}
					}
					return true;
		
				}
			}//controller
		});